package com.larry.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.larry.AppConf;
import com.larry.bean.PaperRecFormBean;
import com.larry.bean.ProductBean;
import com.larry.bean.WeixinUser;
import com.larry.cache.EhCacheUtil;
import com.larry.entity.ProductPO;
import com.larry.entity.UserPO;
import com.larry.service.AuthUserService;
import com.larry.service.OrderService;
import com.larry.service.WeixinUserService;
import com.larry.utils.WeixinUtils;

@Controller
public class MainController {
	@Autowired
	private WeixinUserService weixinUserService;
	@Autowired
	private AuthUserService userService;
	@Autowired
	private OrderService orderService;

	@RequestMapping("/index")
	public String indexPage(HttpServletRequest request, HttpSession session, Model model) {
		// 首先判断一下session中，是否有保存着的当前用户的信息，有的话，就不需要进行重复请求信息
		WeixinUser weiXinUser = null;
		if (session.getAttribute("currentUser") != null) {
			weiXinUser = (WeixinUser) session.getAttribute("currentUser");
		} else {
			String code = request.getParameter("code");
			System.out.println("@@@@@@@@@@@@@@@@@TESTING@@@@@@@@@@@@@@@@");
			weiXinUser=getWeixinUser(session,code);
			session.setAttribute("currentUser", weiXinUser);
			System.out.println(weiXinUser.getHeadImgUrl());
			

		}
		if(session.getAttribute("authUser") == null) {
			UserPO user = userService.getUser(weiXinUser.getOpenId());
			session.setAttribute("authUser", user);
		}
		model.addAttribute("headImg", weiXinUser.getHeadImgUrl());
		model.addAttribute("nickName", weiXinUser.getNickname());
		return "index";

	}
	@RequestMapping("/point_shop")
	public String pointShopPage(HttpServletRequest request, HttpSession session, Model model) {
		WeixinUser weiXinUser = null;
		if (session.getAttribute("currentUser") != null) {
			weiXinUser = (WeixinUser) session.getAttribute("currentUser");
		} else {
			String code = request.getParameter("code");
			System.out.println("@@@@@@@@@@@@@@@@@TESTING@@@@@@@@@@@@@@@@");
			weiXinUser=getWeixinUser(session,code);
			session.setAttribute("currentUser", weiXinUser);
			System.out.println(weiXinUser.getHeadImgUrl());
			

		}
		model.addAttribute("headImg", weiXinUser.getHeadImgUrl());
		model.addAttribute("nickName", weiXinUser.getNickname());
		
		return "point_shop";
	}
	@RequestMapping("/my_order")
	public String orderCenter(HttpServletRequest request, HttpSession session, Model model) {
		WeixinUser weiXinUser = null;
		if (session.getAttribute("currentUser") != null) {
			weiXinUser = (WeixinUser) session.getAttribute("currentUser");
		} else {
			String code = request.getParameter("code");
			System.out.println("@@@@@@@@@@@@@@@@@TESTING@@@@@@@@@@@@@@@@");
			weiXinUser=getWeixinUser(session,code);
			session.setAttribute("currentUser", weiXinUser);
			System.out.println(weiXinUser.getHeadImgUrl());
			

		}
		if(session.getAttribute("authUser") == null) {
			UserPO user = userService.getUser(weiXinUser.getOpenId());
			session.setAttribute("authUser", user);
		}
		model.addAttribute("headImg", weiXinUser.getHeadImgUrl());
		model.addAttribute("nickName", weiXinUser.getNickname());
	    UserPO user =  (UserPO)session.getAttribute("authUser")
		List <OrderPO> orderList = orderService.getAllOrdersByUserID(user.getId());
		return "order_manage";
	}
	@RequestMapping("/my_point")
	public String PointCenter(HttpServletRequest request, HttpSession session, Model model) {
		WeixinUser weiXinUser = null;
		if (session.getAttribute("currentUser") != null) {
			weiXinUser = (WeixinUser) session.getAttribute("currentUser");
		} else {
			String code = request.getParameter("code");
			System.out.println("@@@@@@@@@@@@@@@@@TESTING@@@@@@@@@@@@@@@@");
			weiXinUser=getWeixinUser(session,code);
			session.setAttribute("currentUser", weiXinUser);
			System.out.println(weiXinUser.getHeadImgUrl());
			

		}
		if(session.getAttribute("authUser") == null) {
			UserPO user = userService.getUser(weiXinUser.getOpenId());
			session.setAttribute("authUser", user);
		}
		model.addAttribute("headImg", weiXinUser.getHeadImgUrl());
		model.addAttribute("nickName", weiXinUser.getNickname());
		return "point_manage";
	}
	@RequestMapping("/paper")
	public String paperReconciliate(HttpServletRequest request, HttpSession session, Model model) {
		WeixinUser weiXinUser = (WeixinUser) session.getAttribute("currentUser");
		if(session.getAttribute("authUser") == null) {
			UserPO user = userService.getUser(weiXinUser.getOpenId());
			session.setAttribute("authUser", user);
		}
		model.addAttribute("headImg", weiXinUser.getHeadImgUrl());
		model.addAttribute("nickName", weiXinUser.getNickname());
		List<ProductPO> productList = (List<ProductPO>) EhCacheUtil.get(EhCacheUtil.CACHE_KEY_PROD);
		List<ProductPO> paperProduct= new ArrayList<ProductPO>();
		for(ProductPO p: productList) {
			
			if(1==p.getProductCat().getId()) {
				paperProduct.add(p);
			}
		}
		model.addAttribute("paperProducts",paperProduct);
		return "paper_rec";
	}

	private WeixinUser getWeixinUser(HttpSession session, String code) {
		Map<String, String> authInfo = new HashMap<String, String>();
		String openId = "";
		if (code != null) {
			authInfo = weixinUserService.getAuthInfo(code);
			openId = authInfo.get("Openid");
		}
		String accessToken = weixinUserService.getAccessToken().getToken();
		WeixinUser userinfo = weixinUserService.getUserInfo(accessToken, openId);
		return userinfo;
	}

}
