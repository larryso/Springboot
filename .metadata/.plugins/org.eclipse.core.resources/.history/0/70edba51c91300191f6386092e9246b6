package javaReflect;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ClassTest {
	public static void printConstructors(Constructor[] conArray) {
		for(Constructor c:conArray) {
			System.out.println(c);
		}
	}
	public static void classTest(Object obj) throws NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		Class clazz = obj.getClass();
		// print class name
		System.out.println(clazz.getName());
		//get public Constructors
		Constructor[] conArray = clazz.getConstructors();
		printConstructors(conArray);
		// get all declared constructors
		conArray = clazz.getDeclaredConstructors();
		printConstructors(conArray);
		//get private Constructor and initialize 
		Constructor con = clazz.getDeclaredConstructor(String.class, char.class, Integer.class);
		System.out.println(con);
		con.setAccessible(true);
		ExampleObject eo = (ExampleObject) con.newInstance("Larry",23,54);
		eo.printName();
		/*
		 * Method类，方法的对象 一个成员方法就是一个Method对象 getMethods()方法获取的是所有的public的函数，
		 * 包括父类继承而来的
		 * getDeclaredMethods()获取的是多有该类自己声明的方法，不问访问权限
		 */
		Method[] md = clazz.getMethods();
		for(Method method:md) {
			//得到方法的返回值类型的类类型
			Class retrunType = method.getReturnType();
			//System.out.print(retrunType.getName()+" ");

		}

	}

	public static void main(String[] args) throws Exception {
		classTest(new ExampleObject());
	}

}
