package collection.map;

import java.util.Collections;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;

public class MapTest {
	private static Map<String, Object> hashMap = new HashMap<String, Object>();
	private static Map<String, Object> hashTable = new Hashtable<String, Object>();
	private static Map<String, Object> syncMap = Collections.synchronizedMap(new HashMap<String, Object>());
	private static Map<String, Object> concurrentHashMap = new ConcurrentHashMap<String, Object>();
	private static Map<String, Object> map = syncMap;
	public static void main(String[] args) {
		new Thread(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				while(true) {
					if(map.size()>0) {
						for(Map.Entry<String, Object> entry:map.entrySet()) {
							System.out.println(String.format("%s:%s", entry.getKey(), entry.getValue()));
						}
						map.clear();
					}
					try {
						Thread.sleep(new Random().nextInt(10));
					}catch(Exception e) {
						e.printStackTrace();
					}
				}
			}
			
		}).start();
		
		new Thread(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				
			}
			
		}).start();
		
	}

}
